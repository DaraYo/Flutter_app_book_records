import 'dart:io';
import 'package:flutter_app/database/book/book_dao.dart';
import 'package:flutter_app/database/database_constants.dart';
import 'package:flutter_app/database/session/session_dao.dart';
import 'package:flutter_app/database/session_codes/session_codes_dao.dart';
import 'package:path/path.dart';
import 'package:path_provider/path_provider.dart';
import 'package:sqflite/sqflite.dart';

class DBProvider {
  static final _databaseName = "MyDatabase.db";
  static final _databaseVersion = 1;

  // make this a singleton class
  DBProvider._privateConstructor();
  static final DBProvider instance = DBProvider._privateConstructor();

  // only have a single app-wide reference to the database
  static Database _database;
  Future<Database> get database async {
    if (_database != null) return _database;
    // lazily instantiate the db the first time it is accessed
    _database = await _initDatabase();
    return _database;
  }

  // this opens the database (and creates it if it doesn't exist)
  _initDatabase() async {
    Directory documentsDirectory = await getApplicationDocumentsDirectory();
    String path = join(documentsDirectory.path, _databaseName);
    return await openDatabase(path,
        version: _databaseVersion, onCreate: _onCreate);
  }

  // SQL code to create the database table
  Future _onCreate(Database db, int version) async {
    await db.execute(SessionDao().createTableQuery);
    await db.execute(SessionDao().insertFakeData);
    await db.execute(SessionDao().insertFakeData2);
    await db.execute(SessionDao().insertFakeData3);
    await db.execute(SessionCodeDao().createTableQuery);
    await db.execute(SessionCodeDao().insertFakeData);
    await db.execute(SessionCodeDao().insertFakeData2);
    await db.execute(SessionCodeDao().insertFakeData3);
    await db.execute(BookDao().createTableQuery);
    // await db.execute(BookDao().insertFakeData);
  }

  // Helper methods

  // Inserts a row in the database where each key in the Map is a column name
  // and the value is the column value. The return value is the id of the
  // inserted row.
  Future<int> insert(String table, Map<String, dynamic> row) async {
    Database db = await instance.database;
    return await db.insert(table, row);
  }

  // All of the rows are returned as a list of maps, where each map is
  // a key-value list of columns.
  Future<List<Map<String, dynamic>>> queryAllRows(String table) async {
    Database db = await instance.database;
    return await db.query(table);
  }

  Future<List<Map<String, dynamic>>> queryAllRowsByColumnValue(
      String table, String colName, dynamic value) async {
    Database db = await instance.database;
    return await db.query(table, where: '$colName = ?', whereArgs: [value]);
  }

  // All of the methods (insert, query, update, delete) can also be done using
  // raw SQL commands. This method uses a raw query to give the row count.
  Future<int> queryRowCount(String table) async {
    Database db = await instance.database;
    return Sqflite.firstIntValue(
        await db.rawQuery('SELECT COUNT(*) FROM $table'));
  }

  // We are assuming here that the id column in the map is set. The other
  // column values will be used to update the row.
  Future<int> update(
      String table, String columnId, Map<String, dynamic> row) async {
    Database db = await instance.database;
    int id = row[columnId];
    return await db.update(table, row, where: '$columnId = ?', whereArgs: [id]);
  }

  Future<int> updateBook(
      String table, String columnCode, Map<String, dynamic> row) async {
    Database db = await instance.database;
    String code = row[columnCode];
    return await db
        .update(table, row, where: '$columnCode = ?', whereArgs: [code]);
  }

  Future<bool> updateAll(
      String table, String column, List<int> listItems) async {
    Database db = await instance.database;
    var rawString = "";
    for (var i = 0; i < listItems.length; i++) {
      rawString += "?";
      if (listItems.length != i + 1) {
        rawString += ",";
      }
    }
    await db.rawUpdate('''UPDATE ${DatabaseConstants.sessionTable} 
    SET ${DatabaseConstants.sessionColumnSessionSent} = 1 
    WHERE ${DatabaseConstants.sessionColumnId} in (${rawString})
    ''', listItems);
    return true;
  }

  // Deletes the row specified by the id. The number of affected rows is
  // returned. This should be 1 as long as the row exists.
  Future<int> delete(String table, String columnId, int id) async {
    Database db = await instance.database;
    return await db.delete(table, where: '$columnId = ?', whereArgs: [id]);
  }

  Future<int> bookDelete(String table, String columnId, String id) async {
    Database db = await instance.database;
    return await db.delete(table, where: '$columnId = ?', whereArgs: [id]);
  }

  // Future<int> specificDelete(
  //     String table, String whereExpression, List<String> expressionArgs) async {
  //   Database db = await instance.database;
  //   return await db.delete(table, where: '$columnId = ?', whereArgs: [id]);
  // }

  Future<int> sessionCodeDelete(String table, String columnSessionId,
      String columnCode, int sessionId, String code) async {
    Database db = await instance.database;
    return await db.delete(table,
        where: '$columnSessionId = ? and $columnCode = ?',
        whereArgs: [sessionId, code]);
  }

  Future<int> logicalDelete(
      String table, String columnId, Map<String, dynamic> row) async {
    Database db = await instance.database;
    int id = row[columnId];
    return await db.update(table, row, where: '$columnId = ?', whereArgs: [id]);
  }
}
